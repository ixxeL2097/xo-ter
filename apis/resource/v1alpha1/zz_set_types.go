/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type LimitObservation struct {
}

type LimitParameters struct {

	// +kubebuilder:validation:Required
	Quantity *float64 `json:"quantity" tf:"quantity,omitempty"`

	// +kubebuilder:validation:Required
	Type *string `json:"type" tf:"type,omitempty"`
}

type SetObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type SetParameters struct {

	// +kubebuilder:validation:Required
	Limit []LimitParameters `json:"limit" tf:"limit,omitempty"`

	// +kubebuilder:validation:Optional
	Objects []*string `json:"objects,omitempty" tf:"objects,omitempty"`

	// +kubebuilder:validation:Optional
	Subjects []*string `json:"subjects,omitempty" tf:"subjects,omitempty"`
}

// SetSpec defines the desired state of Set
type SetSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     SetParameters `json:"forProvider"`
}

// SetStatus defines the observed state of Set.
type SetStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        SetObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Set is the Schema for the Sets API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,xojet}
type Set struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              SetSpec   `json:"spec"`
	Status            SetStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SetList contains a list of Sets
type SetList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Set `json:"items"`
}

// Repository type metadata.
var (
	Set_Kind             = "Set"
	Set_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Set_Kind}.String()
	Set_KindAPIVersion   = Set_Kind + "." + CRDGroupVersion.String()
	Set_GroupVersionKind = CRDGroupVersion.WithKind(Set_Kind)
)

func init() {
	SchemeBuilder.Register(&Set{}, &SetList{})
}
